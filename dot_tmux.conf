# ==========================
# ===  General settings  ===
# ==========================

set -g default-terminal "screen-256color"
set -g history-limit 50000
set-option -g lock-after-time 3600
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g display-panes-time 1500
# set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename on
setw -g automatic-rename off
setw -g aggressive-resize on
set -s escape-time 0
set -g base-index 1
setw -g pane-base-index 1
set-option -g renumber-windows on
set -g focus-events on
set -sa terminal-overrides ',screen-256color:RGB'
set -g visual-activity off
# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
# set -g prefix C-a
set -g prefix C-a
bind-key -n C-b send-prefix
bind-key C-a last-window

# Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "#I:#W"

# Enable mouse support
set -g mouse on

# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind '}'    # swap-pane -D
unbind '{'    # swap-pane -U
unbind [    # paste-buffer
unbind ]    
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer 
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left
unbind S

# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration 
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"
unbind C-i
bind I run -b '~/.tmux/plugins/tpm/bin/update_plugins all'

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"


# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
# bind | split-window -h -c "#{pane_current_path}"
# bind _ split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r C-[ previous-window
bind -r C-] next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
# bind -r Tab last-window   # cycle thru MRU tabs
# bind -r C-a swap-pane -D
# bind -r C-A swap-pane -U

# Zoom pane
bind + resize-pane -Z

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
# bind \ if '[ #{pane_index} -eq 1 ]' \
#      'swap-pane -s "!"' \
#      'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
unbind x               # unbind-key “x” from it’s current job of “ask and then close”
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

bind p paste-buffer
bind C-p choose-buffer

# trigger copy mode by
# bind -n M-Up copy-mode
bind C-\\ copy-mode

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# # wrap default shell in reattach-to-user-namespace if available
# # there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# # don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
# if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
#     "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"
#
yank="~/.tmux/yank.sh"
#
# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection
    
# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external


#default source-file ~/.tmux/theme.conf
# source /usr/share/powerline/bindings/tmux/powerline.conf

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"

# [[[ plugins

# ============================
# ===       Plugins        ===
# ============================

# first make sure we have tpm
run -b '[[ -d ~/.tmux/plugins/tpm ]] || \
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'

set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-online-status'
# set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
# set -g @plugin 'samoshkin/tmux-plugin-sysstat'

# Plugin properties
# set -g @sidebar-tree 't'
# set -g @sidebar-tree-focus 'T'
# set -g @sidebar-tree-command 'tree -C'

set -g @open-S 'https://www.google.com/search?q='

# set -g @plugin 'jabirali/tmux-tilish'
# set -g @tilish-default 'main-vertical'
# set -g @tilish-dmenu 'on'
# set -g @tilish-prefix 'C-space'
set -g @plugin 'tmux-plugins/tmux-pain-control'
# set -g @plugin 'xamut/tmux-spotify'
set -g @plugin 'laktak/extrakto'
set -g @extrakto_split_direction a
set -g @extrakto_split_size "15"
set -g @extrakto_clip_tool "xsel --input --clipboard" # works better for nvim
set -g @extrakto_default_opt "lines"

# set -g @plugin 'xamut/tmux-weather'
# set-option -g @tmux-weather-units "m"
# set-option -g @tmux-weather-interval 15

set -g @plugin 'obxhdx/tmux-ssh-status'

set -g @plugin 'MunifTanjim/tmux-mode-indicator'

set -g @plugin 'MunifTanjim/tmux-suspend'
bind ! send-keys F12
set -g @suspend_key F12
# remove colors from status line for suspended state
set -g @suspend_suspended_options " \
  status-left-style::bg=brightblack\\,fg=black bold dim, \
  window-status-current-style:gw:bg=brightblack\\,fg=black, \
  window-status-last-style:gw:fg=brightblack, \
  window-status-style:gw:bg=black\\,fg=brightblack, \
  @mode_indicator_custom_prompt:: ---- , \
  @mode_indicator_custom_mode_style::bg=brightblack\\,fg=black, \
"

set -g @plugin 'jatap/tmux-base16-statusline'
set -g @base16-statusline 'main'
set -g @plugin 'bjesus/muxile'

set -g @plugin 'b0o/tmux-autoreload'
set -g @tmux-autoreload-quiet 0

set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'CrispyConductor/tmux-copy-toolkit'

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-boot 'on'
set -g @continuum-restore 'on'

run '~/.tmux/plugins/tpm/tpm'

set -g status-right "\
#{tmux_mode_indicator} \
☥ #{continuum_status} \
#{ssh_status} \
#[fg=yellow]%H:%M:%S #[fg=white]#{@main_separator} \
#[fg=green]%d-%b-%y \
"
# ]]] 
## run -b 'which gitmux >/dev/null 2>/dev/null \
##     || (go get -u github.com/arl/gitmux && echo "installed $(which gitmux)")'
